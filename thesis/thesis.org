THESIS -*- mode: org -*-
#+STARTUP: showall

Cythochrome P450 Inhibitor Classification with Statistical Learning

* Abstract

* Cythochrome P450 superfamily overview
** Importance of Cytochrome P450 in humans
** Importance oc Cytochrome P450 in pharmaceutical R&D
** Computational models of CYPs for research
** Computational models use by regulatory agencies
* Background of machine learning and their applications to various areas
** Modeling
* The business case for computational modeling
** Pharma companies seek to control research cost and improve efficiency, ref Nature review
** Current methods not taking account complex networks of leading to unintended effects or failure to note redundancy
** 
** Early indication of drug-drug interaction risk in this case
* Review of PubChem Assay 1851
**
* Reproducible research
* Feature generation and molecular descriptors
* Machine Learning algorithms
** kappa Nearest Neighbor
** Support Vector Machines
** Random Forests
** Bayesian methods
** Neural networks
*** Simply a nonlinear modeling techniques
*** multilayered
*** leads to Deep Learning
* Statistical comparison of model performance
** Confusion Matrix
*** True/False Positives/Negatives 
** Accuracy 
*** Predicted / Total
*** (TP + TN) / (TP + FP + TN + FN)
** AUROC Area under Reciever Operating Characteristic Curve
* Data Analysis considerations
** Balance number of positives and negatives
** Split dataset into training and test set before looking at it.
** Cross-Validation
* Tools for statistical learning
** Molecular Operating Environment
*** Commercial
*** Well accepted by industry
*** integrated
** SciPy ecosystem
*** open source
*** Python programming language
*** heavy use of numpy arrays to vectorize operations for speed
*** packages = pandas -> scikit-learn -> matplotlib or ggplot
*** Ipython notebooks as an Integrated Computing Environment
*** Interactive shell executed in a browser
*** .ipynb saved in JSON format for sharing 

Methods
* Dataset preparation
** Downloaded two files from pubchem
*** Bioassy
**** 17143 SID compounds
**** .csv with data from all five isozymes assay and results
*** Structure as SMILES
** Merged on SID column using pandas
** MOE descriptor calculation
*** washed conformatio
*** energy minimization?
*** 2-D descriptors generated
**** categorical
**** nominal
**** continuous
** Saved as .csv
** Split into five datasets with pandas
*** SID
*** Activity Score for that isozyme
*** 186 MOE 2-D descriptors
** Wrote script to balance the number of actives and inactives for each dataset
*** in each case the number of inactives was greater than the number of actives
** Wrote script to randomly split the balanced datasets
*** 80% training and 20% to be held back as test set
*** split not based on Activity categorization
*** random number generator seed set to ensure reproducible reults
*** balance of active/inactive checked to see if they were still acceptably balanced
** balanced and split datasets saved to figshare.com
*** all subsequent analyses use the same splits for comparability
*** freely, openly and permanantly available

* Modeling in MOE
** PLS regression
*** Quantitave
*** Poor predictive accuracy as demonstrated by previous attempts in Dr. Zheng's lab
** Binary QSAR
*** Bayesian method
*** Load training data and use MOE built in menu-driven method
*** ActivityScore selected as response variable 
*** Binary classification threshold set to 39
*** Smoothing parameter left at default 0.25
*** Varied number of principle components
**** 2, 5, 10, 15, 20, 30 and 44
**** MOE automatically erforms PCAon high dimensional datasets
**** each PC captures a portion of the total variance inherent in the dataset
**** each PC is orthogonal to and uncorrelated from the others
**** inclusion of more PCs means more of the variance is being accounted for in classification decision
**** at the cost of interpretability
*** MOE models written to .fit files 
*** model report saved to .txt file
*** test set loaded 
*** washed structure appended
*** All models evaluated and prediction probabilities appended to database file
**** predicted probabilities greater than or equal to .50 counted as active inhibitor predictions
*** MS Excel spreadsheet used to classify prediction probabilites as true/false active/inactive
**** confusion matrices tabulated and accuracy scores calculated in spreadsheet
*** models built and evaluated for all five isozymes

* Modeling in Python
** kappa Nearest Neighbor on two principle components
*** nonparametric (almost ant-intellectual)
*** training data loaded into dataframe
*** response variable ActivityScore identified
*** molecular descriptors scaled and normed
*** PCA perfomed on scaled and normed descriptors
*** first two prcinciple components are used to train a kNN model
*** test data loaded
*** test descriptors scaled normed and PCAed
*** KNN.predict run on first two PCs of test set.
*** model accuracy scores calculated by sklearn
*** confusion matrix generated by sklearn
*** 2-D plot of train/test active/inactive
*** 2-D plot of decision space
** kappa Nearest Neighbors on full set of 2-D molecular descriptors
*** 186 dimensions
*** response and predictor variables are identified y = (classification category and xi=molecular descriptors)
*** StandardScaler applied to give predictors mean 0 and SD 1
*** kNN model trained with training set
*** confusion matrix and accuracy score generated on training set with five-fold cross validation
*** KNN.predict run on test sets
*** confusion matrix and accuracy score generated by sklearn
** Support Vector Machine classification
** Random Forest classification
** Wrote functions to perform all three methods in series
*** it would be as simple as calling a new function to add classification models using another sklearn method
*** function called to build model, evaluate test set and calculate CM and accuracies
*** datasets still evaluated seperately

** All confusion matrices and accuracy score collected in a spreadsheet




To finalize
* Table of Contents
* Table of Figures
* Acknowledgements
* Glossary
* References
* Appendix

* Things I could have done better
** Used RDKit to render SMILES
** Found extra dataset refered to by Cheng
** Recreated Hill plot from bioassay data
** Remove some compounds from dataset that don't belong there (inorganics, etc)
** iterate model building and testing over all isozymes
